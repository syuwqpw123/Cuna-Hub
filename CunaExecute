--Cuna Execute
--Open 소스 입니다!
game.StarterGui:SetCore("SendNotification", {
    Title = "Execute";
    Text = "CunaExecute | ??? | Roblox Studto";
    Duration = 10;
    })
local ScreenGui = Instance.new("ScreenGui")
local main = Instance.new("Frame")
local ScriptExecute = Instance.new("TextButton")
local ScriptClear = Instance.new("TextButton")
local CunaExecuteName = Instance.new("TextLabel")
local Close = Instance.new("TextButton")
local Scroll = Instance.new("ScrollingFrame")
local Input = Instance.new("TextBox")
local Comments_ = Instance.new("TextLabel")
local Globals_ = Instance.new("TextLabel")
local Keywords_ = Instance.new("TextLabel")
local Numbers_ = Instance.new("TextLabel")
local RemoteHighlight_ = Instance.new("TextLabel")
local Strings_ = Instance.new("TextLabel")
local Tokens_ = Instance.new("TextLabel")
local Lines = Instance.new("TextLabel")
local Close2 = Instance.new("TextButton")
local open = Instance.new("Frame")
local UIopen = Instance.new("TextButton")

ScreenGui.Parent = game.CoreGui

main.Name = "main"
main.Parent = ScreenGui
main.BackgroundColor3 = Color3.fromRGB(170, 0, 255)
main.BackgroundTransparency = 0.600
main.BorderColor3 = Color3.fromRGB(170, 85, 255)
main.Position = UDim2.new(0.198282689, 0, 0.413225889, 0)
main.Size = UDim2.new(0, 444, 0, 210)
main.Active = true
main.Draggable = true

ScriptExecute.Name = "ScriptExecute"
ScriptExecute.Parent = main
ScriptExecute.BackgroundColor3 = Color3.fromRGB(170, 85, 255)
ScriptExecute.BorderColor3 = Color3.fromRGB(170, 85, 255)
ScriptExecute.Position = UDim2.new(0, 0, 0.805736601, 0)
ScriptExecute.Size = UDim2.new(0, 64, 0, 40)
ScriptExecute.Font = Enum.Font.SourceSans
ScriptExecute.Text = "Execute"
ScriptExecute.TextColor3 = Color3.fromRGB(0, 0, 0)
ScriptExecute.TextSize = 23.000
ScriptExecute.MouseButton1Click:connect(function()
	loadstring(Input.Text)()
end)


ScriptClear.Name = "ScriptClear"
ScriptClear.Parent = main
ScriptClear.BackgroundColor3 = Color3.fromRGB(170, 85, 255)
ScriptClear.BorderColor3 = Color3.fromRGB(170, 85, 255)
ScriptClear.Position = UDim2.new(0.166133717, 0, 0.805736601, 0)
ScriptClear.Size = UDim2.new(0, 67, 0, 40)
ScriptClear.Font = Enum.Font.SourceSans
ScriptClear.Text = "Clear"
ScriptClear.TextColor3 = Color3.fromRGB(0, 0, 0)
ScriptClear.TextSize = 23.000
ScriptClear.MouseButton1Click:connect(function()
	Input.Text = ""
end)

CunaExecuteName.Name = "CunaExecute Name"
CunaExecuteName.Parent = main
CunaExecuteName.BackgroundColor3 = Color3.fromRGB(170, 0, 255)
CunaExecuteName.BackgroundTransparency = 1.000
CunaExecuteName.BorderColor3 = Color3.fromRGB(170, 0, 255)
CunaExecuteName.Position = UDim2.new(-0.000608358299, 0, -0.00405433308, 0)
CunaExecuteName.Size = UDim2.new(0, 197, 0, 25)
CunaExecuteName.Font = Enum.Font.SourceSans
CunaExecuteName.Text = "Cuna Execute(by Cuna Dev#9015)"
CunaExecuteName.TextColor3 = Color3.fromRGB(0, 0, 0)
CunaExecuteName.TextSize = 14.000
CunaExecuteName.TextWrapped = true

Close.Name = "Close"
Close.Parent = main
Close.BackgroundColor3 = Color3.fromRGB(170, 0, 255)
Close.BackgroundTransparency = 1.000
Close.BorderColor3 = Color3.fromRGB(170, 0, 255)
Close.Position = UDim2.new(0.887528062, 0, 0, 0)
Close.Size = UDim2.new(0, 49, 0, 24)
Close.Font = Enum.Font.SourceSans
Close.Text = "Close"
Close.TextColor3 = Color3.fromRGB(0, 0, 0)
Close.TextSize = 14.000
Close.MouseButton1Click:connect(function()
	open.Visible = true
	main.Visible = false
end)

Scroll.Name = "Scroll"
Scroll.Parent = main
Scroll.BackgroundColor3 = Color3.fromRGB(170, 170, 255)
Scroll.BorderColor3 = Color3.fromRGB(30, 30, 30)
Scroll.BorderSizePixel = 0
Scroll.Position = UDim2.new(0, 0, 0.108420961, 0)
Scroll.Size = UDim2.new(0, 444, 0, 147)
Scroll.ZIndex = 3
Scroll.BottomImage = ""
Scroll.CanvasSize = UDim2.new(0, 0, 0, 5000)
Scroll.HorizontalScrollBarInset = Enum.ScrollBarInset.ScrollBar
Scroll.MidImage = ""
Scroll.ScrollBarThickness = 3
Scroll.TopImage = ""

Input.Name = "Input"
Input.Parent = Scroll
Input.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
Input.BackgroundTransparency = 1.000
Input.BorderSizePixel = 0
Input.Position = UDim2.new(0, 25, 0, 0)
Input.Size = UDim2.new(0.899999976, 0, 4114.58301, 0)
Input.ZIndex = 3
Input.ClearTextOnFocus = false
Input.Font = Enum.Font.Code
Input.MultiLine = true
Input.PlaceholderColor3 = Color3.fromRGB(136, 136, 136)
Input.Text = "print(\"cuna Execute\")"
Input.TextColor3 = Color3.fromRGB(255, 255, 255)
Input.TextSize = 14.000
Input.TextWrapped = true
Input.TextXAlignment = Enum.TextXAlignment.Left
Input.TextYAlignment = Enum.TextYAlignment.Top

Comments_.Name = "Comments_"
Comments_.Parent = Input
Comments_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Comments_.BackgroundTransparency = 1.000
Comments_.ClipsDescendants = true
Comments_.Size = UDim2.new(1, 0, 1, 0)
Comments_.ZIndex = 5
Comments_.Font = Enum.Font.Code
Comments_.Text = ""
Comments_.TextColor3 = Color3.fromRGB(86, 86, 86)
Comments_.TextSize = 14.000
Comments_.TextTransparency = 1.000
Comments_.TextXAlignment = Enum.TextXAlignment.Left
Comments_.TextYAlignment = Enum.TextYAlignment.Top

Globals_.Name = "Globals_"
Globals_.Parent = Input
Globals_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Globals_.BackgroundTransparency = 1.000
Globals_.ClipsDescendants = true
Globals_.Size = UDim2.new(1, 0, 1, 0)
Globals_.ZIndex = 5
Globals_.Font = Enum.Font.Code
Globals_.Text = ""
Globals_.TextColor3 = Color3.fromRGB(132, 214, 247)
Globals_.TextSize = 14.000
Globals_.TextXAlignment = Enum.TextXAlignment.Left
Globals_.TextYAlignment = Enum.TextYAlignment.Top

Keywords_.Name = "Keywords_"
Keywords_.Parent = Input
Keywords_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Keywords_.BackgroundTransparency = 1.000
Keywords_.ClipsDescendants = true
Keywords_.Size = UDim2.new(1, 0, 1, 0)
Keywords_.ZIndex = 5
Keywords_.Font = Enum.Font.Code
Keywords_.Text = ""
Keywords_.TextColor3 = Color3.fromRGB(248, 109, 124)
Keywords_.TextSize = 14.000
Keywords_.TextXAlignment = Enum.TextXAlignment.Left
Keywords_.TextYAlignment = Enum.TextYAlignment.Top

Numbers_.Name = "Numbers_"
Numbers_.Parent = Input
Numbers_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Numbers_.BackgroundTransparency = 1.000
Numbers_.ClipsDescendants = true
Numbers_.Size = UDim2.new(1, 0, 1, 0)
Numbers_.ZIndex = 4
Numbers_.Font = Enum.Font.Code
Numbers_.Text = ""
Numbers_.TextColor3 = Color3.fromRGB(255, 198, 0)
Numbers_.TextSize = 14.000
Numbers_.TextXAlignment = Enum.TextXAlignment.Left
Numbers_.TextYAlignment = Enum.TextYAlignment.Top

RemoteHighlight_.Name = "RemoteHighlight_"
RemoteHighlight_.Parent = Input
RemoteHighlight_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
RemoteHighlight_.BackgroundTransparency = 1.000
RemoteHighlight_.ClipsDescendants = true
RemoteHighlight_.Size = UDim2.new(1, 0, 1, 0)
RemoteHighlight_.ZIndex = 5
RemoteHighlight_.Font = Enum.Font.Code
RemoteHighlight_.Text = ""
RemoteHighlight_.TextColor3 = Color3.fromRGB(11, 255, 203)
RemoteHighlight_.TextSize = 14.000
RemoteHighlight_.TextXAlignment = Enum.TextXAlignment.Left
RemoteHighlight_.TextYAlignment = Enum.TextYAlignment.Top

Strings_.Name = "Strings_"
Strings_.Parent = Input
Strings_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Strings_.BackgroundTransparency = 1.000
Strings_.ClipsDescendants = true
Strings_.Size = UDim2.new(1, 0, 1, 0)
Strings_.ZIndex = 5
Strings_.Font = Enum.Font.Code
Strings_.Text = ""
Strings_.TextColor3 = Color3.fromRGB(173, 241, 149)
Strings_.TextSize = 14.000
Strings_.TextXAlignment = Enum.TextXAlignment.Left
Strings_.TextYAlignment = Enum.TextYAlignment.Top

Tokens_.Name = "Tokens_"
Tokens_.Parent = Input
Tokens_.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Tokens_.BackgroundTransparency = 1.000
Tokens_.ClipsDescendants = true
Tokens_.Size = UDim2.new(1, 0, 1, 0)
Tokens_.ZIndex = 5
Tokens_.Font = Enum.Font.Code
Tokens_.Text = ""
Tokens_.TextColor3 = Color3.fromRGB(255, 255, 255)
Tokens_.TextSize = 14.000
Tokens_.TextXAlignment = Enum.TextXAlignment.Left
Tokens_.TextYAlignment = Enum.TextYAlignment.Top

Lines.Name = "Lines"
Lines.Parent = Scroll
Lines.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Lines.BackgroundTransparency = 1.000
Lines.BorderColor3 = Color3.fromRGB(25, 25, 25)
Lines.Size = UDim2.new(-0.00999999978, 30, 1, 0)
Lines.ZIndex = 4
Lines.Font = Enum.Font.Code
Lines.Text = "1"
Lines.TextColor3 = Color3.fromRGB(255, 255, 255)
Lines.TextSize = 15.000
Lines.TextYAlignment = Enum.TextYAlignment.Top

Close2.Name = "Close2"
Close2.Parent = main
Close2.BackgroundColor3 = Color3.fromRGB(170, 0, 255)
Close2.BackgroundTransparency = 1.000
Close2.BorderColor3 = Color3.fromRGB(170, 0, 255)
Close2.Position = UDim2.new(0.861375093, 0, 0.842857122, 0)
Close2.Size = UDim2.new(0, 49, 0, 24)
Close2.Font = Enum.Font.SourceSans
Close2.Text = "Close"
Close2.TextColor3 = Color3.fromRGB(0, 0, 0)
Close2.TextSize = 14.000
Close2.MouseButton1Click:connect(function()
	open.Visible = true
	main.Visible = false
end)

open.Name = "open"
open.Parent = ScreenGui
open.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
open.Position = UDim2.new(0.770570576, 0, 0.11910817, 0)
open.Size = UDim2.new(0, 96, 0, 33)
open.Visible = false

UIopen.Name = "UI open"
UIopen.Parent = open
UIopen.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
UIopen.Position = UDim2.new(0, 0, 0.24242425, 0)
UIopen.Size = UDim2.new(0, 95, 0, 18)
UIopen.Font = Enum.Font.SourceSans
UIopen.Text = "Open"
UIopen.TextColor3 = Color3.fromRGB(0, 0, 0)
UIopen.TextSize = 14.000
UIopen.MouseButton1Click:connect(function()
	open.Visible = false
	main.Visible = true
end)

-- Scripts:

local function NQMWW_fake_script() -- Input.Auto Indent 
	local script = Instance.new('LocalScript', Input)

	local Code = script.Parent
	
	function onKeyPress(inputObject, gameProcessedEvent)
		local len = Code.Text:len()
	    if inputObject.KeyCode == Enum.KeyCode.Return and script.Parent:IsFocused() then
			if string.match(Code.Text:sub(len-2), "do") or string.match(Code.Text:sub(len-4), "then") or string.match(Code.Text:sub(len-3), "do ") or string.match(Code.Text:sub(len-5), "then ") or string.match(Code.Text:sub(len-10), "function()") then
				Code.Text = Code.Text .. "    " .. "\nend" 
				script.Parent.CursorPosition = len + 5
			end
		end
	end
	
	
	game:GetService("UserInputService").InputBegan:connect(onKeyPress)
end
coroutine.wrap(NQMWW_fake_script)()
local function XJIM_fake_script() -- Scroll.Highlight 
	local script = Instance.new('LocalScript', Scroll)

	local lua_keywords = {
	    "and",
	    "break",
	    "do",
	    "else",
	    "elseif",
	    "end",
	    "false",
	    "for",
	    "function",
	    "goto",
	    "if",
	    "in",
	    "local",
	    "nil",
	    "not",
	    "or",
	    "repeat",
	    "return",
	    "then",
	    "true",
	    "until",
	    "while",
	    "/respawn",
		"/R6"
	}
	local global_env = {
	    "getrawmetatable",
	    "game",
	    "workspace",
	    "script",
	    "math",
	    "string",
	    "table",
	    "print",
	    "wait",
	    "BrickColor",
	    "Color3",
	    "next",
	    "pairs",
	    "ipairs",
	    "select",
	    "unpack",
	    "Instance",
	    "Vector2",
	    "Vector3",
	    "CFrame",
	    "Ray",
	    "UDim2",
	    "Enum",
	    "assert",
	    "error",
	    "warn",
	    "tick",
	    "loadstring",
	    "_G",
	    "shared",
	    "getfenv",
	    "setfenv",
	    "newproxy",
	    "setmetatable",
	    "getmetatable",
	    "os",
	    "debug",
	    "pcall",
	    "ypcall",
	    "xpcall",
	    "rawequal",
	    "rawset",
	    "rawget",
	    "tonumber",
	    "tostring",
	    "type",
	    "typeof",
	    "_VERSION",
	    "coroutine",
	    "delay",
	    "require",
	    "spawn",
	    "LoadLibrary",
	    "settings",
	    "stats",
	    "time",
	    "UserSettings",
	    "version",
	    "Axes",
	    "ColorSequence",
	    "Faces",
	    "ColorSequenceKeypoint",
	    "NumberRange",
	    "NumberSequence",
	    "NumberSequenceKeypoint",
	    "gcinfo",
	    "elapsedTime",
	    "collectgarbage",
	    "PhysicalProperties",
	    "Rect",
	    "Region3",
	    "Region3int16",
	    "UDim",
	    "Vector2int16",
		"Vector3int16",
		"print"
	}
	
	local Source = script.Parent.Input
	local Lines = Source.Parent.Lines
	
	local Highlight = function(string, keywords)
	    local K = {}
	    local S = string
	    local Token = {
	        ["="] = true,
	        ["."] = true,
	        [","] = true,
	        ["("] = true,
	        [")"] = true,
	        ["["] = true,
	        ["]"] = true,
	        ["{"] = true,
	        ["}"] = true,
	        [":"] = true,
	        ["*"] = true,
	        ["/"] = true,
	        ["+"] = true,
	        ["-"] = true,
	        ["%"] = true,
	        [";"] = true,
	        ["~"] = true
	    }
	    for i, v in pairs(keywords) do
	        K[v] = true
	    end
	    S =
	        S:gsub(
	        ".",
	        function(c)
	            if Token[c] ~= nil then
	                return "\32"
	            else
	                return c
	            end
	        end
	    )
	    S =
	        S:gsub(
	        "%S+",
	        function(c)
	            if K[c] ~= nil then
	                return c
	            else
	                return (" "):rep(#c)
	            end
	        end
	    )
	
	    return S
	end
	
	local hTokens = function(string)
	    local Token = {
	        ["="] = true,
	        ["."] = true,
	        [","] = true,
	        ["("] = true,
	        [")"] = true,
	        ["["] = true,
	        ["]"] = true,
	        ["{"] = true,
	        ["}"] = true,
	        [":"] = true,
	        ["*"] = true,
	        ["/"] = true,
	        ["+"] = true,
	        ["-"] = true,
	        ["%"] = true,
	        [";"] = true,
	        ["~"] = true
	    }
	    local A = ""
	    string:gsub(
	        ".",
	        function(c)
	            if Token[c] ~= nil then
	                A = A .. c
	            elseif c == "\n" then
	                A = A .. "\n"
	            elseif c == "\t" then
	                A = A .. "\t"
	            else
	                A = A .. "\32"
	            end
	        end
	    )
	
	    return A
	end
	
	local strings = function(string)
	    local highlight = ""
	    local quote = false
	    string:gsub(
	        ".",
	        function(c)
	            if quote == false and c == '"' then
	                quote = true
	            elseif quote == true and c == '"' then
	                quote = false
	            end
	            if quote == false and c == '"' then
	                highlight = highlight .. '"'
	            elseif c == "\n" then
	                highlight = highlight .. "\n"
	            elseif c == "\t" then
	                highlight = highlight .. "\t"
	            elseif quote == true then
	                highlight = highlight .. c
	            elseif quote == false then
	                highlight = highlight .. "\32"
	            end
	        end
	    )
	
	    return highlight
	end
	
	local comments = function(string)
	    local ret = ""
	    string:gsub(
	        "[^\r\n]+",
	        function(c)
	            local comm = false
	            local i = 0
	            c:gsub(
	                ".",
	                function(n)
	                    i = i + 1
	                    if c:sub(i, i + 1) == "--" then
	                        comm = true
	                    end
	                    if comm == true then
	                        ret = ret .. n
	                    else
	                        ret = ret .. "\32"
	                    end
	                end
	            )
	            ret = ret
	        end
	    )
	
	    return ret
	end
	
	local numbers = function(string)
	    local A = ""
	    string:gsub(
	        ".",
	        function(c)
	            if tonumber(c) ~= nil then
	                A = A .. c
	            elseif c == "\n" then
	                A = A .. "\n"
	            elseif c == "\t" then
	                A = A .. "\t"
	            else
	                A = A .. "\32"
	            end
	        end
	    )
	
	    return A
	end
	
	local highlight_source = function(type)
	    if type == "Text" then
			Source.Text = Source.Text:gsub("\13", "")
			Source.Text = Source.Text:gsub("\t", "      ")
			local s = Source.Text
			Source.Keywords_.Text = Highlight(s, lua_keywords)
			Source.Globals_.Text = Highlight(s, global_env)
			Source.RemoteHighlight_.Text =
				Highlight(s, {"FireServer", "fireServer", "InvokeServer", "invokeServer", "/respawn", "/R6"})
			Source.Tokens_.Text = hTokens(s)
			Source.Numbers_.Text = numbers(s)
			Source.Strings_.Text = strings(s)
	        local lin = 1
	        s:gsub(
	            "\n",
	            function()
	                lin = lin + 1
	            end
	        )
	        Lines.Text = ""
	        for i = 1, lin do
	            Lines.Text = Lines.Text .. i .. "\n"
	        end
	    end
	end
	
	highlight_source("Text")
	
	Source.Changed:Connect(highlight_source)
	
end
coroutine.wrap(XJIM_fake_script)()
local function TXJC_fake_script() -- Scroll.Smooth 
	local script = Instance.new('LocalScript', Scroll)

	local content = script.Parent
	content.ScrollingEnabled = not script.SmoothingEnabled.Value
	
	local input = content:Clone()
	input:ClearAllChildren()
	input.BackgroundTransparency = 1
	input.ScrollBarImageTransparency = 1
	input.ZIndex = content.ZIndex + 1
	input.Name = "_smoothinputframe"
	input.ScrollingEnabled = script.SmoothingEnabled.Value
	input.Parent = content.Parent
	
	script.SmoothingEnabled:GetPropertyChangedSignal("Value"):Connect(
	    function()
	        if script.SmoothingEnabled.Value then
	            input.CanvasPosition = content.CanvasPosition
	        end
	        content.ScrollingEnabled = not script.SmoothingEnabled.Value
	        input.ScrollingEnabled = script.SmoothingEnabled.Value
	    end
	)
	
	input:GetPropertyChangedSignal("CanvasPosition"):Connect(
	    function()
	        if not script.SmoothingEnabled.Value then
	            content.CanvasPosition = input.CanvasPosition
	        end
	    end
	)
	
	script.InputFrame.Value = input
	
	local function syncProperty(prop)
	    content:GetPropertyChangedSignal(prop):Connect(
	        function()
	            if prop == "ZIndex" then
	                input[prop] = content[prop] + 1
	            else
	                input[prop] = content[prop]
	            end
	        end
	    )
	end
	
	syncProperty "CanvasSize"
	syncProperty "Position"
	syncProperty "Rotation"
	syncProperty "ScrollingDirection"
	syncProperty "ScrollBarThickness"
	syncProperty "BorderSizePixel"
	syncProperty "ElasticBehavior"
	syncProperty "SizeConstraint"
	syncProperty "ZIndex"
	syncProperty "BorderColor3"
	syncProperty "Size"
	syncProperty "AnchorPoint"
	syncProperty "Visible"
	
	local smoothConnection =
	    game:GetService("RunService").RenderStepped:Connect(
	    function()
	        if script.SmoothingEnabled.Value then
	            local a = content.CanvasPosition
	            local b = input.CanvasPosition
	            local c = script.SmoothingFactor.Value
	            local d = (b - a) * c + a
	            content.CanvasPosition = d
	        end
	    end
	)
	
	content.AncestryChanged:Connect(
	    function()
	        if content.Parent == nil then
	            input:Destroy()
	            smoothConnection:Disconnect()
	        end
	    end
	)
	
end
coroutine.wrap(TXJC_fake_script)()
local function YTAJ_fake_script() -- main.LocalScript 
	local script = Instance.new('LocalScript', main)

	local lua_keywords = {"and", "break", "do", "else", "elseif", "end", "false", "for", "function", "goto", "if", "in", "local", "nil", "not", "or", "repeat", "return", "then", "true", "until", "while"}
	local global_env = {"getrawmetatable", "game", "workspace", "script", "math", "string", "table", "print", "wait", "BrickColor", "Color3", "next", "pairs", "ipairs", "select", "unpack", "Instance", "Vector2", "Vector3", "CFrame", "Ray", "UDim2", "Enum", "assert", "error", "warn", "tick", "loadstring", "_G", "shared", "getfenv", "setfenv", "newproxy", "setmetatable", "getmetatable", "os", "debug", "pcall", "ypcall", "xpcall", "rawequal", "rawset", "rawget", "tonumber", "tostring", "type", "typeof", "_VERSION", "coroutine", "delay", "require", "spawn", "LoadLibrary", "settings", "stats", "time", "UserSettings", "version", "Axes", "ColorSequence", "Faces", "ColorSequenceKeypoint", "NumberRange", "NumberSequence", "NumberSequenceKeypoint", "gcinfo", "elapsedTime", "collectgarbage", "PhysicalProperties", "Rect", "Region3", "Region3int16", "UDim", "Vector2int16", "Vector3int16", "print"}
	
	local Source = script.Parent.EditorFrame.Source
	local Lines = Source.Parent.Lines
	
	local Highlight = function(string, keywords)
	    local K = {}
	    local S = string
	    local Token =
	    {
	        ["="] = true,
	        ["."] = true,
	        [","] = true,
	        ["("] = true,
	        [")"] = true,
	        ["["] = true,
	        ["]"] = true,
	        ["{"] = true,
	        ["}"] = true,
	        [":"] = true,
	        ["*"] = true,
	        ["/"] = true,
	        ["+"] = true,
	        ["-"] = true,
	        ["%"] = true,
			[";"] = true,
			["~"] = true
	    }
	    for i, v in pairs(keywords) do
	        K[v] = true
	    end
	    S = S:gsub(".", function(c)
	        if Token[c] ~= nil then
	            return "\32"
	        else
	            return c
	        end
	    end)
	    S = S:gsub("%S+", function(c)
	        if K[c] ~= nil then
	            return c
	        else
	            return (" "):rep(#c)
	        end
	    end)
	  
	    return S
	end
	
	local hTokens = function(string)
	    local Token =
	    {
	        ["="] = true,
	        ["."] = true,
	        [","] = true,
	        ["("] = true,
	        [")"] = true,
	        ["["] = true,
	        ["]"] = true,
	        ["{"] = true,
	        ["}"] = true,
	        [":"] = true,
	        ["*"] = true,
	        ["/"] = true,
	        ["+"] = true,
	        ["-"] = true,
	        ["%"] = true,
			[";"] = true,
			["~"] = true
	    }
	    local A = ""
	    string:gsub(".", function(c)
	        if Token[c] ~= nil then
	            A = A .. c
	        elseif c == "\n" then
	            A = A .. "\n"
			elseif c == "\t" then
				A = A .. "\t"
	        else
	            A = A .. "\32"
	        end
	    end)
	  
	    return A
	end
	
	
	local strings = function(string)
	    local highlight = ""
	    local quote = false
	    string:gsub(".", function(c)
	        if quote == false and c == "\"" then
	            quote = true
	        elseif quote == true and c == "\"" then
	            quote = false
	        end
	        if quote == false and c == "\"" then
	            highlight = highlight .. "\""
	        elseif c == "\n" then
	            highlight = highlight .. "\n"
			elseif c == "\t" then
			    highlight = highlight .. "\t"
	        elseif quote == true then
	            highlight = highlight .. c
	        elseif quote == false then
	            highlight = highlight .. "\32"
	        end
	    end)
	  
	    return highlight
	end
	
	local comments = function(string)
	    local ret = ""
	    string:gsub("[^\r\n]+", function(c)
	        local comm = false
	        local i = 0
	        c:gsub(".", function(n)
	            i = i + 1
	            if c:sub(i, i + 1) == "--" then
	                comm = true
	            end
	            if comm == true then
	                ret = ret .. n
	            else
	                ret = ret .. "\32"
	            end
	        end)
	        ret = ret
	    end)
	    
	    return ret
	end
	
	local numbers = function(string)
	    local A = ""
	    string:gsub(".", function(c)
	        if tonumber(c) ~= nil then
	            A = A .. c
	        elseif c == "\n" then
	            A = A .. "\n"
			elseif c == "\t" then
				A = A .. "\t"
	        else
	            A = A .. "\32"
	        end
	    end)
	  
	    return A
	end
	
	local highlight_source = function(type)
		if type == "Text" then
			Source.Text = Source.Text:gsub("\13", "")
			Source.Text = Source.Text:gsub("\t", "      ")
			local s = Source.Text
			Source.Keywords_.Text = Highlight(s, lua_keywords)
			Source.Globals_.Text = Highlight(s, global_env)
			Source.RemoteHighlight_.Text = Highlight(s, {"FireServer", "fireServer", "InvokeServer", "invokeServer"})
			Source.Tokens_.Text = hTokens(s)
			Source.Numbers_.Text = numbers(s)
			Source.Strings_.Text = strings(s)
			local lin = 1
			s:gsub("\n", function()
				lin = lin + 1
			end)
			Lines.Text = ""
			for i = 1, lin do
				Lines.Text = Lines.Text .. i .. "\n"
			end
		end
	end
	
	highlight_source("Text")
	
	Source.Changed:Connect(highlight_source)
	
	
end
coroutine.wrap(YTAJ_fake_script)()
